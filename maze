<!DOCTYPE html>
<html>
<head>
    <script src="https://aframe.io/releases/1.3.0/aframe.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cannon.js/0.6.2/cannon.min.js"></script>
</head>
<body>
    <a-scene id="scene">
        <a-entity id="rig" position="3 1.6 19">
            <a-entity camera look-controls></a-entity>
        </a-entity>
          
        <!-- Maze floor -->
        <a-plane position="9.5 0 9.5" rotation="-90 0 0" width="20" height="20" color="#7B8D93"></a-plane>
      
        <!-- Maze generator -->
        <script>
          const mazeGrid = [
            '1111111111',
            '1000000011',
            '1011101011',
            '1010101011',
            '1010101011',
            '1010111011',
            '1010000011',
            '1011101011',
            '1010000001',
            '1111111111',
          ];
      
          const blockSize = 2;
          const halfSize = blockSize / 2;
      
          mazeGrid.forEach((row, rowIndex) => {
            for (let colIndex = 0; colIndex < row.length; colIndex++) {
              const cell = row[colIndex];
              if (cell === '1') {
                const xPos = colIndex * blockSize + halfSize;
                const zPos = rowIndex * blockSize + halfSize;
                const wall = document.createElement('a-box');
                wall.setAttribute('position', `${xPos} ${halfSize} ${zPos}`);
                wall.setAttribute('width', blockSize);
                wall.setAttribute('height', blockSize);
                wall.setAttribute('depth', blockSize);
                wall.setAttribute('color', '#7BC8A4');
                wall.setAttribute('static-body', '');
                document.querySelector('a-scene').appendChild(wall);
              }
            }
          });

          // Physics world
          const world = new CANNON.World();
          world.gravity.set(0, -9.82, 0);
          world.broadphase = new CANNON.NaiveBroadphase();
          world.solver.iterations = 10;

          // Add ground body
          const groundShape = new CANNON.Plane();
          const groundBody = new CANNON.Body({ mass: 0 });
          groundBody.addShape(groundShape);
          groundBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), -Math.PI / 2);
          world.addBody(groundBody);

          // Add maze walls as physics bodies
          const wallShape = new CANNON.Box(new CANNON.Vec3(blockSize / 2, blockSize / 2, blockSize / 2));
          document.querySelectorAll('a-box').forEach((wall) => {
            const position = wall.getAttribute('position');
            const wallBody = new CANNON.Body({ mass: 0, position: new CANNON.Vec3(position.x, position.y, position.z) });
            wallBody.addShape(wallShape);
            world.addBody(wallBody);
          });
          // Add player body
          const playerShape = new CANNON.Sphere(0.5);
          const playerBody = new CANNON.Body({ mass: 5, position: new CANNON.Vec3(3, 1.6, 19) });
          playerBody.addShape(playerShape);
          world.addBody(playerBody);

          // Update physics world and player position
          const fixedTimeStep = 1.0 / 60.0;
          const maxSubSteps = 3;
          const rig = document.querySelector('#rig');

          function updatePhysics() {
            world.step(fixedTimeStep, fixedTimeStep, maxSubSteps);

            rig.object3D.position.copy(playerBody.position);
            requestAnimationFrame(updatePhysics);
          }

          // Wait for the scene to be loaded before attaching the event listener
          document.querySelector('a-scene').addEventListener('loaded', () => {
            updatePhysics();

            document.addEventListener('keydown', (event) => {
              const keyCode = event.keyCode;
              const direction = new THREE.Vector3();
              const camera = document.querySelector('a-camera');
          
              // W - move forward
              if (keyCode === 87) {
                direction.z = -1;
              }
              // A - move left
              else if (keyCode === 65) {
                direction.x = -1;
              }
              // S - move backward
              else if (keyCode === 83) {
                direction.z = 1;
              }
              // D - move right
              else if (keyCode === 68) {
                direction.x = 1;
              }
          
              // Apply the camera's rotation to the direction vector
              direction.applyQuaternion(camera.object3D.quaternion);
          
              // Set the player's velocity
              playerBody.velocity.set(direction.x * 5, playerBody.velocity.y, direction.z * 5);
            });
          });
        </script>
      
        <!-- Sky -->
        <a-sky color="#ECECEC"></a-sky>
    </a-scene>
</body>
</html>

          
